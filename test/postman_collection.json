{
	"info": {
		"_postman_id": "3e181684-7e89-426d-911f-d0adfef7f193",
		"name": "fairytale-api",
		"description": "Postman base test suite for the Fairytale API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add unicorn 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self\", pm.response.json()[\"self\"]);",
							"pm.environment.set(\"user_id\", pm.response.json()[\"friend\"][\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Glitter\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Rainbow\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Glitter\",\r\n  \"color\": \"Rainbow\",\r\n  \"magic\": 20\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn - no Authorization header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn empty body 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn empty json 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn invalid json 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": Spotty,\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 0\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with str attribute > char limit 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty12356789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with invalid char in string 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty!\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with empty str attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with space-only str attribute 400 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"  \",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with magic 0 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 0\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with magic > max 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 21\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn with wrong datatype 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": \"18\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "text/html",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>name: spotty</li>\r\n  <li>type: leopard print</li>\r\n  <li>length: 18</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn no content-type header 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "text/html",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>name: spotty</li>\r\n  <li>type: leopard print</li>\r\n  <li>length: 18</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn_2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id_2\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self_2\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Strawberry Sparkle\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Pearl Pink\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(16);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Strawberry Sparkle\",\r\n  \"color\": \"Pearl Pink\",\r\n  \"magic\": 16\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn_3 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id_3\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self_3\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Rosemary\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Berry Blush\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(14);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rosemary\",\r\n  \"color\": \"Berry Blush\",\r\n  \"magic\": 14\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn_4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id_4\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self_4\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sparkle\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Glimmer\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(18);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Sparkle\",\r\n  \"color\": \"Glimmer\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn_5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id_5\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self_5\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Princess\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Royal Blue\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Princess\",\r\n  \"color\": \"Royal Blue\",\r\n  \"magic\": 20\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "add unicorn_6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"unicorn_id_6\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"unicorn_self_6\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Flora\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Dusk Rose\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(14);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Flora\",\r\n  \"color\": \"Dusk Rose\",\r\n  \"magic\": 14\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorns 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Method not allowed\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - valid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - no Authorization header - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns  - invalid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"/*",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});*/",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - default limit, offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are five results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(5);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is a next link\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});",
							"",
							"pm.environment.set(\"unicorn_next\", pm.response.json()[\"next\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - using next link - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There is at least one result\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.be.at.least(1);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is no next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{unicorn_next}}",
					"host": [
						"{{unicorn_next}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - custom offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are four results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(4);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is not a next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns?offset=2",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					],
					"query": [
						{
							"key": "offset",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - custom limit - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(2);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is a next link\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns?limit=2",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - custom limit and offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(3);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is not a next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns?limit=3&offset=3",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						},
						{
							"key": "offset",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - offset out of range - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are no results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(0);",
							"});",
							"",
							"pm.test(\"There is no next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns?limit=3&offset=10",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						},
						{
							"key": "offset",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - valid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Glitter\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Rainbow\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - no Authorization header - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Glitter\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Rainbow\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn  - invalid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Glitter\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Rainbow\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Glitter\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Rainbow\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(20);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - missing attributes - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - invalid unicorn id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>name: spotty</li>\r\n  <li>type: leopard print</li>\r\n  <li>length: 18</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Spotty\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Leopard Print\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(18);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - missing attributes - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"Unknown\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - invalid unicorn id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>color: zebra stripe</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch unicorn - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Spotty\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Zebra Stripes\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(18);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self\", pm.response.json()[\"self\"]);",
							"pm.environment.set(\"founder_id\", pm.response.json()[\"founder\"][\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Stonehooves\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Mountains\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Known for their dexterity and earth magic\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Stonehooves\",\r\n  \"habitat\": \"Mountains\",\r\n  \"description\": \"Known for their dexterity and earth magic\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing - no Authorization header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing empty body 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing empty json 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing invalid json 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": Spotty,\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 0\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with str attribute > char limit 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers12356789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with invalid char in string 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers!\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with empty str attribute 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with space-only str attribute 400 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"  \"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing with wrong datatype 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": 30,\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "text/html",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>name: Moondancers</li>\r\n  <li>habitat: Forest</li>\r\n  <li>description: Mostly nocturnal</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing no content-type header 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing_2 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id_2\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self_2\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Moondancers\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Forest\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Mostly nocturnal\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Moondancers\",\r\n  \"habitat\": \"Forest\",\r\n  \"description\": \"Mostly nocturnal\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing_3 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id_3\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self_3\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Watermark\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Rivers\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Able to breathe underwater\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Watermark\",\r\n  \"habitat\": \"Rivers\",\r\n  \"description\": \"Able to breathe underwater\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing_4 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id_4\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self_4\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"The Alliance\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Urban\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"The pigeons of the unicorn world\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"The Alliance\",\r\n  \"habitat\": \"Urban\",\r\n  \"description\": \"The pigeons of the unicorn world\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing_5 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id_5\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self_5\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Sparklers\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Tropical\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Adept at light magic\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Sparklers\",\r\n  \"habitat\": \"Tropical\",\r\n  \"description\": \"Adept at light magic\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "add blessing_6 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.environment.set(\"blessing_id_6\", pm.response.json()[\"id\"]);",
							"pm.environment.set(\"blessing_self_6\", pm.response.json()[\"self\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Harbingers\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Battlegrounds\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"There is some debate as to whether these bloodthirsty creatures can really be classified as unicorns\");",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Harbingers\",\r\n  \"habitat\": \"Battlegrounds\",\r\n  \"description\": \"There is some debate as to whether these bloodthirsty creatures can really be classified as unicorns\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessings 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Method not allowed\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - no Authorization header - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings  - invalid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"/*",
							"pm.test(\"error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});*/",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - valid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - default limit, offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are five results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(5);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is a next link\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()[\"count\"]).to.equal(6);",
							"});",
							"",
							"pm.environment.set(\"unicorn_next\", pm.response.json()[\"next\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - using next link - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There is at least one result\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.be.at.least(1);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is no next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{unicorn_next}}",
					"host": [
						"{{unicorn_next}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - custom offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are four results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(4);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is not a next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings?offset=2",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					],
					"query": [
						{
							"key": "offset",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - custom limit - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(2);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is a next link\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings?limit=2",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					],
					"query": [
						{
							"key": "limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - custom limit and offset - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(3);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"There is not a next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});",
							"",
							"pm.test(\"There is a count\", function(){",
							"   pm.expect(pm.response.json()).to.have.property(\"count\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings?limit=3&offset=3",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						},
						{
							"key": "offset",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - offset out of range - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are no results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(0);",
							"});",
							"",
							"pm.test(\"There is no next link\", function(){",
							"   pm.expect(pm.response.json()).not.to.have.property(\"next\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings?limit=3&offset=10",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					],
					"query": [
						{
							"key": "limit",
							"value": "3"
						},
						{
							"key": "offset",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - valid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Stonehooves\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Mountains\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Known for their dexterity and earth magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - no Authorization header - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Stonehooves\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Mountains\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Known for their dexterity and earth magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing  - invalid JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Stonehooves\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Mountains\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Known for their dexterity and earth magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Stonehooves\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Mountains\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Known for their dexterity and earth magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Soname\",\r\n  \"habitat\": \"Shadybrook\",\r\n  \"description\": \"A mysterious group\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No blessing with this blessing_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\",\r\n  \"description\": \"Prone to bursting into song and dance\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\",\r\n  \"description\": \"Prone to bursting into song and dance\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\",\r\n  \"description\": \"Prone to bursting into song and dance\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - missing attributes - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - invalid blessing id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No blessing with this blessing_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\",\r\n  \"description\": \"Prone to bursting into song and dance\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Spotty\",\r\n  \"color\": \"Leopard Print\",\r\n  \"magic\": 18\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>name: spotty</li>\r\n  <li>type: leopard print</li>\r\n  <li>length: 18</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put blessing - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Rockettes\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Sandstone\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Prone to bursting into song and dance\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Rockettes\",\r\n  \"habitat\": \"Sandstone\",\r\n  \"description\": \"Prone to bursting into song and dance\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - missing attributes - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request body is empty or invalid\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \"Unknown\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - invalid blessing id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No blessing with this blessing_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"color\": \"Zebra Stripes\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - unsupported type 415",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the request media type\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "text/html"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<ul>\r\n  <li>habitat: Rocks</li>\r\n</ul>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "patch blessing - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Rockettes\");",
							"    pm.expect(pm.response.json()[\"habitat\"]).to.eq(\"Rocks\");",
							"    pm.expect(pm.response.json()[\"description\"]).to.eq(\"Prone to bursting into song and dance\");",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.eq(0);",
							"    pm.expect(pm.response.json()[\"founder\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/blessings/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"habitat\": \"Rocks\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user unicorns - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"blessings\": [\r\n        {\r\n            \"habitat\": \"Rivers\",\r\n            \"founder\": {\r\n                \"id\": \"5629499534213120\",\r\n                \"self\": \"http://127.0.0.1:8080/users/5629499534213120\"\r\n            },\r\n            \"description\": \"Able to breathe underwater\",\r\n            \"unicorns\": [],\r\n            \"name\": \"Watermark\",\r\n            \"id\": \"5633226290757632\",\r\n            \"self\": \"http://127.0.0.1:8080/blessings/5633226290757632\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user unicorns - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user unicorns - invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No user with this user_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{invalid_user_id}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{invalid_user_id}}",
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user unicorns - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are five results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.be.at.least(5);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"magic\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"color\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"blessing\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"friend\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"correct friend\", function () {",
							"    pm.expect(pm.response.json()[\"unicorns\"][0]['friend']['id']).to.eq(pm.environment.get('user_id'));",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user unicorns - no unicorns - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are no results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id_2}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user blessings - request body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"blessings\": [\r\n        {\r\n            \"habitat\": \"Rivers\",\r\n            \"founder\": {\r\n                \"id\": \"5629499534213120\",\r\n                \"self\": \"http://127.0.0.1:8080/users/5629499534213120\"\r\n            },\r\n            \"description\": \"Able to breathe underwater\",\r\n            \"unicorns\": [],\r\n            \"name\": \"Watermark\",\r\n            \"id\": \"5633226290757632\",\r\n            \"self\": \"http://127.0.0.1:8080/blessings/5633226290757632\"\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user blessings - not acceptable 406",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The service does not support the specified response media type(s)\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user blessings - invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No user with this user_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{invalid_user_id}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{invalid_user_id}}",
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user blessings - no JWT - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are five results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.be.at.least(5);",
							"});",
							"",
							"pm.test(\"Result has expected properties\", function(){",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"habitat\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"description\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"name\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"unicorns\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"founder\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"self\");",
							"    pm.expect(pm.response.json()[\"blessings\"][0]).to.have.property(\"id\");",
							"});",
							"",
							"pm.test(\"correct founder\", function () {",
							"    pm.expect(pm.response.json()[\"blessings\"][0]['founder']['id']).to.eq(pm.environment.get('user_id'));",
							"    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id}}",
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user blessings - no blessings - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are no results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/users/{{user_id_2}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"users",
						"{{user_id_2}}",
						"blessings"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - valid JWT, invalid unicorn - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified unicorn and/or blessing do not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - valid JWT, invalid blessing - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified unicorn and/or blessing do not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn_2 in blessing - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_2}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_2}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "put unicorn in blessing - valid JWT, already assigned - 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"409 status code\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The unicorn is already assigned to a blessing\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - blessing added 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Spotty\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Zebra Stripes\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(18);",
							"    pm.expect(pm.response.json()[\"blessing\"]['id']).to.eq(pm.environment.get('blessing_id'));",
							"    pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - check unicorns added 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"unicorn was removed\", function () {",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - valid JWT, invalid unicorn - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified unicorn and/or blessing do not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - valid JWT, invalid blessing - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The specified unicorn and/or blessing do not exist\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - valid JWT, incorrect blessing - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id is assigned to the blessing with this blessing_id\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - valid JWT, correct user - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "remove unicorn from blessing - valid JWT, not assigned - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id is assigned to the blessing with this blessing_id\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}",
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - invalid unicorn id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{invalid_unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{invalid_unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn - valid JWT, correct user - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - check unicorn deleted 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No unicorn with this unicorn_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - check unicorn removed 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"unicorn was removed\", function () {",
							"    pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - no JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - no Auth header - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - invalid JWT - 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"401 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Missing or invalid JWT\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalid_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - wrong user - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The provided credentials do not have permission to perform that action\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{forbidden_jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - invalid unicorn id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No blessing with this blessing_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{invalid_blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{invalid_blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing - valid JWT, correct user - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get blessing - check deleted 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"404 status code\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No blessing with this blessing_id exists\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get unicorn - blessing removed 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Strawberry Sparkle\");",
							"    pm.expect(pm.response.json()[\"color\"]).to.eq(\"Pearl Pink\");",
							"    pm.expect(pm.response.json()[\"magic\"]).to.eq(16);",
							"    pm.expect(pm.response.json()[\"blessing\"]).to.eq(null);",
							"        pm.expect(pm.response.json()[\"friend\"][\"id\"]).to.eq(pm.environment.get('user_id'));",
							"    const self_url = pm.environment.get(\"app_url\") + \"/unicorns/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn_2 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn_3 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn_4 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn_5 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete unicorn_6 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns/{{unicorn_id_6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns",
						"{{unicorn_id_6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all unicorns - confirm cleanup - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"unicorns\"].length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/unicorns",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing_2 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id_2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing_3 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id_3}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id_3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing_4 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id_4}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id_4}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing_5 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id_5}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id_5}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete blessing_6 cleanup - 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"204 status code\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json",
						"disabled": true
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings/{{blessing_id_6}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings",
						"{{blessing_id_6}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all blessings - confirm cleanup - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ecff411-7a3b-42dc-b33a-52116065953c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"There are two results\", function(){",
							"   pm.expect(pm.response.json()[\"blessings\"].length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{app_url}}/blessings",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"blessings"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "42aac422-9426-4c94-b0f1-5e1b9218971e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5e41c7b2-d777-46d4-b524-7cad7edb5875",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}